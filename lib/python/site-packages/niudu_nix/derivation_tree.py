from PySide6.QtWidgets import QTreeView
from PySide6.QtCore import QItemSelectionModel
from PySide6.QtGui import QStandardItem, QStandardItemModel
import subprocess
import json


# get Nix derivation of Nix store path and parse it from json into python obj
# note: Nix derivation is json repr of Nix derivation set produced by pkg expr instantiated, containing all info to build&install pkg
# basically, it's final definition of pkg instance with all vars set to defined vals
# Nix normally stores them in store as .drv files, along resulting pkg store paths with pkg contents
def get_derivation(path):
    # TODO somewhy at some point between 2020 and 2024 Nix hid this command behind scary "--extra-experimental-features", any safer option?
    # TODO sometimes it fails on paths (incl ones which are deps of profiles) with err "does not have a known deriver"
    command = 'nix --extra-experimental-features nix-command derivation show ' + path
    process = subprocess.Popen(command.split(' '), stdout=subprocess.PIPE)
    (output, _) = process.communicate()
    _ = process.wait()
    if _ == 0:
        return json.loads(output.decode())
    return {}


# insert Qt treeview item representing member of object representing parsed json
# TODO maybe this should be method of DerivationView
def add_dict_item(key, val, parent):
    if type(val) is dict:
        child = QStandardItem('"'+key+'": { ... }')
        for key, val in val.items():
            add_dict_item(key, val, child)
    elif type(val) is list:
        child = QStandardItem('"'+key+'": [ ... ]')
        for item in val:
            child.appendRow(QStandardItem('"'+item+'"'))
    else:
        child = QStandardItem('"'+key+'": "'+str(val)+'"')
    parent.appendRow(child)


# treeview displaying Nix derivation
class DerivationView(QTreeView):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.setModel(QStandardItemModel())
        self.setHeaderHidden(True)
    
    # update contents to display Nix derivation of specified Nix store path
    def update(self, store_path):
        derivation_dict = get_derivation(store_path)
        self.model().removeRows(0, 1)
        for key, val in derivation_dict.items():
            add_dict_item(key, val, self.model().invisibleRootItem())
        self.expandAll()
        # Highlight output path matching selected store path
        derivation_item = self.model().invisibleRootItem().child(0)
        for i in range(derivation_item.rowCount()):
            if derivation_item.child(i).text() == 'outputs':
                outputs_item = derivation_item.child(i)
                for i in range(outputs_item.rowCount()):
                    path_item = outputs_item.child(i).child(0)
                    if path_item.text() == 'path: "' + store_path + '"':
                        print(path_item)
                        self.selectionModel().select(path_item.index(), QItemSelectionModel.ClearAndSelect)
